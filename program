#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <SPI.h>
#include <MFRC522.h>
#include <HTTPSRedirect.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Function declarations
String sanitizeData(const byte* data, size_t length);
void ReadDataFromBlock(int blockNum, byte readBlockData[]);

// Constants and variables
LiquidCrystal_I2C lcd(0x27, 16, 2);
const char *GScriptId = "********";

// Enter network credentials:
const char* ssid     = "******";
const char* password = "*****";
String payload_base =  "{\"command\": \"insert_row\", \"sheet_name\": \"Sheet1\", \"values\": ";
String payload = "";
const char* host = "script.google.com";
const int httpsPort = 443;
const char* fingerprint = "";
String url = String("/macros/s/") + GScriptId + "/exec";
HTTPSRedirect* client = nullptr;
String student_Rollno;
const int MAX_SCANNED_TAGS = 100;
String scannedTags[MAX_SCANNED_TAGS];
int scannedTagsCount = 0;
int blocks[] = {4, 5, 6, 8, 9};
#define total_blocks  (sizeof(blocks) / sizeof(blocks[0]))
#define RST_PIN  0
#define SS_PIN   2
#define BUZZER   4
MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;
MFRC522::StatusCode status;
byte readBlockData[64];
byte bufferLen = 64;

void setup() {
  pinMode(D8, OUTPUT);
  Serial.begin(9600);
  delay(10);
  Serial.println('\n');
  SPI.begin();
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Connecting to");
  lcd.setCursor(0, 1);
  lcd.print("WiFi...");

  WiFi.begin(ssid, password);
  Serial.print("Connecting to ");
  Serial.print(ssid); Serial.println(" ...");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println('\n');
  Serial.println("Connection established!");
  Serial.print("IP address:\t");
  Serial.println(WiFi.localIP());

  client = new HTTPSRedirect(httpsPort);
  client->setInsecure();
  client->setPrintResponseBody(true);
  client->setContentTypeHeader("application/json");

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Connecting to");
  lcd.setCursor(0, 1);
  lcd.print("Google ");
  delay(5000);

  Serial.print("Connecting to ");
  Serial.println(host);

  bool flag = false;
  for (int i = 0; i < 5; i++) {
    int retval = client->connect(host, httpsPort);
    if (retval == 1) {
      flag = true;
      String msg = "Connected. OK";
      Serial.println(msg);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print(msg);
      delay(2000);
      break;
    } else {
      Serial.println("Connection failed. Retrying...");
    }
  }

  if (!flag) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Connection fail");
    Serial.print("Could not connect to server: ");
    Serial.println(host);
    delay(5000);
    return;
  }

  delete client;
  client = nullptr;
}

void loop() {
  static bool flag = false;
  if (!flag) {
    client = new HTTPSRedirect(httpsPort);
    client->setInsecure();
    flag = true;
    client->setPrintResponseBody(true);
    client->setContentTypeHeader("application/json");
  }
  if (client != nullptr) {
    if (!client->connected()) {
      client->connect(host, httpsPort);
    }
  } else {
    Serial.println("Error creating client object!");
  }

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Scan your Tag");

  mfrc522.PCD_Init();
  if (!mfrc522.PICC_IsNewCardPresent()) { return; }
  if (!mfrc522.PICC_ReadCardSerial()) { return; }
  Serial.println();
  Serial.println(F("Reading last data from RFID..."));

  String values = "", data;
  for (byte i = 0; i < total_blocks; i++) {
    ReadDataFromBlock(blocks[i], readBlockData);
    data = sanitizeData(readBlockData, bufferLen);
    data.trim();
    if (i == 0) {
      student_Rollno = data;
      values = "\"" + data + ",";
    } else if (i == total_blocks - 1) {
      values += data + "\"}";
    } else {
      values += data + ",";
    }
  }

  // Check if the tag has been scanned before
  bool isDuplicate = false;
  for (int i = 0; i < scannedTagsCount; i++) {
    if (scannedTags[i] == student_Rollno) {
      isDuplicate = true;
      break;
    }
  }

  if (isDuplicate) {
    // If duplicate, send a delete_row command
    payload_base = "{\"command\": \"delete_row\", \"sheet_name\": \"Sheet1\", \"values\": ";
    payload = payload_base + "\"" + student_Rollno + "\"}";
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Deleting Data...");
  } else {
    // If not duplicate, send an insert_row command
    payload_base = "{\"command\": \"insert_row\", \"sheet_name\": \"Sheet1\", \"values\": ";
    payload = payload_base + values;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Publishing Data");
    lcd.setCursor(0, 1);
    lcd.print("Please Wait...");

    // Add the tag to the scanned list
    if (scannedTagsCount < MAX_SCANNED_TAGS) {
      scannedTags[scannedTagsCount++] = student_Rollno;
    }
  }

  Serial.println("Publishing data...");
  Serial.println(payload);
  if (client->POST(url, host, payload)) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Roll no: " + student_Rollno);
    lcd.setCursor(0, 1);
    lcd.print(isDuplicate ? "Deleted" : "Present");
    digitalWrite(D8, HIGH);
    delay(2000);
    digitalWrite(D8, LOW);
    delay(2000);
  } else {
    Serial.println("Error while connecting");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Failed.");
    lcd.setCursor(0, 1);
    lcd.print("Try Again");
  }

  delay(5000);
}

String sanitizeData(const byte* data, size_t length) {
  String sanitized = "";
  for (size_t i = 0; i < length; ++i) {
    char c = (char)data[i];
    if (isPrintable(c) && c >= 32 && c <= 126) {
      sanitized += c;
    }
  }
  sanitized.trim(); 
  return sanitized;
}

void ReadDataFromBlock(int blockNum, byte readBlockData[]) {
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }

  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockNum, &key, &(mfrc522.uid));

  if (status != MFRC522::STATUS_OK) {
    Serial.print("Authentication failed for Read: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  } else {
    Serial.println("Authentication success");
  }

  // Ensure the buffer length is set correctly
  bufferLen = 64;

  status = mfrc522.MIFARE_Read(blockNum, readBlockData, &bufferLen);
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Reading failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  } else {
    readBlockData[62] = ' ';
    readBlockData[63] = ' ';
    Serial.println("Block was read successfully");
  }

  Serial.print("Data size read: ");
  Serial.println(bufferLen);  // Print the size of data read
}
